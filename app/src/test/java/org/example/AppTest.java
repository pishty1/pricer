/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.Test;
import static org.mockito.Mockito.when;

import org.example.PayOff.OptionsType;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import org.junit.runner.RunWith;

@RunWith(MockitoJUnitRunner.class)
public class AppTest {

    @Mock
    private Random1 random1;

    @InjectMocks
    private App app;


    @Test
    public void testSimpleMonteCarlo1() {
        // app = new App();

        try (MockedStatic<Random1> rand1 = Mockito.mockStatic(Random1.class)) {
            rand1.when(Random1::getGaussianBySummation).thenReturn(0.5);
            var expiry = 0.5;
            var strike = 100;
            var spot = 100;
            var vol = 0.2;
            var r =0.05;
            var numPaths = 100000;
            var result = app.simpleMonteCarlo1(expiry, strike, spot, vol, r, numPaths, new PayOff(OptionsType.CALL, strike));
            // assertEquals(result, 100, 0.01);
            System.out.println(result);
        }
    }
}
